import { Type } from "@sinclair/typebox";

export const RedeemResponseSchema = Type.Object({
    result: Type.String(),
    paymentReference: Type.String(),
    redemptionId: Type.String(),
    redemptions: Type.Array(Type.Object({
        id: Type.String(),
        date: Type.Optional(Type.String()),
        amount: Type.Optional(Type.Number()),
        order: Type.Optional(Type.Object({
            id: Type.String(),
            source_id: Type.Optional(Type.String()),
            status: Type.Optional(Type.Union([Type.Literal('CREATED'), Type.Literal('PAID'), Type.Literal('PROCESSING'), Type.Literal('CANCELED'), Type.Literal('FULFILLED')])),
            customer_id: Type.Optional(Type.String()),
            referrer_id: Type.Optional(Type.String()),
            amount: Type.Optional(Type.Number()),
            discount_amount: Type.Optional(Type.Number()),
            applied_discount_amount: Type.Optional(Type.Number()),
            total_discount_amount: Type.Optional(Type.Number()),
            total_applied_discount_amount: Type.Optional(Type.Number()),
            total_amount: Type.Optional(Type.Number()),
            created_at: Type.Optional(Type.String()),
            object: Type.Literal('order'),
        })),
        result: Type.String(),
        status: Type.Optional(Type.String()),
        voucher: Type.Object({
            id: Type.String(),
            code: Type.String(),
            gift: Type.Optional(Type.Object({
                amount: Type.Optional(Type.Number()),
                balance: Type.Optional(Type.Number()),
                effect: Type.Optional(Type.String()),
            })),
            type: Type.Optional(Type.String()),
            campaign: Type.Optional(Type.String()),
            campaign_id: Type.Optional(Type.String()),
            is_referral_code: Type.Optional(Type.Boolean()),
            category_id: Type.Optional(Type.String()),
            active: Type.Optional(Type.Boolean()),
            created_at: Type.Optional(Type.String()),
            updated_at: Type.Optional(Type.String()),
            metadata: Type.Optional(Type.Object({})),
            object: Type.Literal('voucher'),
            redemption: Type.Optional(Type.Object({
                quantity: Type.Optional(Type.Number()),
                redeemed_quantity: Type.Optional(Type.Number()),
                redeemed_amount: Type.Optional(Type.Number()),
            })),
        }),
        metadata: Type.Optional(Type.Object({})),
    })),
    order: Type.Optional(Type.Object({
        id: Type.String(),
        source_id: Type.Optional(Type.String()),
        created_at: Type.String(),
        updated_at: Type.Optional(Type.String()),
        status: Type.Optional(Type.Union([Type.Literal('CREATED'), Type.Literal('PAID'), Type.Literal('PROCESSING'), Type.Literal('CANCELED'), Type.Literal('FULFILLED')])),
        amount: Type.Optional(Type.Number()),
        discount_amount: Type.Optional(Type.Number()),
        total_discount_amount: Type.Optional(Type.Number()),
        total_amount: Type.Optional(Type.Number()),
        applied_discount_amount: Type.Optional(Type.Number()),
        total_applied_discount_amount: Type.Optional(Type.Number()),
        object: Type.Literal('order'),
        customer_id: Type.Optional(Type.String()),
        referrer_id: Type.Optional(Type.String()),
    })),
});
